name: modmesh_viewer

on:
  push:
  pull_request:
  schedule:
    - cron: '34 17 * * *'

jobs:
  build:

    name: test after cmake build qt-based viewer

    runs-on: ${{ matrix.os }}

    strategy:
        matrix:
          os: [ubuntu-22.04, macos-12, windows-2022]
          cmake_build_type: [Release, Debug]
          arch: [amd64]

        fail-fast: false

    steps:

    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: dependency (ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        sudo apt-get -qqy update
        sudo apt-get -qy install \
            sudo curl git build-essential make cmake libc6-dev gcc g++ \
            python3 python3-dev python3-venv \
            qt6-3d-dev
        # TODO: not figure out why this is needed. Without this package, we do
        # not make cmake navigate to the right path to get the qt lib
        sudo apt-get -qy install \
            libgl1-mesa-dev

        sudo pip3 install numpy pytest flake8
        
    - name: dependency (macos)
      if: ${{ startsWith(matrix.os, 'macos-12') }}
      run: |
        brew install python3 llvm qt6
        ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
        ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
        echo "which pip3: $(which pip3)"
        pip3 install -U setuptools
        pip3 install -U numpy pytest flake8

    - name: Install Qt (windows)
      if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==2.1.*'
        version: '6.3.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qt3d'

    - name: dependency (windows)
      if: runner.os == 'Windows'
      run: pip3 install -U numpy pytest flake8 pybind11

    - name: dependency (manual)
      if: runner.os != 'Windows'
      run: sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11

    - name: show dependency
      if: runner.os != 'Windows'
      run: |
        echo "gcc path: $(which gcc)"
        echo "gcc version: $(gcc --version)"
        echo "cmake path: $(which cmake)"
        echo "cmake version: $(cmake --version)"
        echo "python3 path: $(which python3)"
        echo "python3 version: $(python3 --version)"
        echo "pip3 path: $(which pip3)"
        python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
        echo "pytest path: $(which pytest)"
        echo "pytest version: $(pytest --version)"
        echo "clang-tidy path: $(which clang-tidy)"
        echo "clang-tidy version: $(clang-tidy -version)"
        echo "flake8 path: $(which flake8)"
        echo "flake8 version: $(flake8 --version)"

    - name: show dependency (windows)
      if: runner.os == 'Windows'
      run: |
        Get-Command cl
        Get-Command cmake
        Get-Command python3
        Get-Command pip3
        python3 -c "import numpy ; print('numpy.__version__:', numpy.__version__)"
        python3 -c "import pybind11 ; print('pybind11.__version__:', pybind11.__version__)"
        pybind11-config --cmakedir
        Get-Command pytest
        Get-Command clang-tidy
        Get-Command flake8

    - name: buildext
      if: runner.os != 'Windows'
      run: |
        make buildext \
          VERBOSE=1 BUILD_QT=ON \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: pytest
      if: runner.os != 'Windows'
      run: |
        make pytest \
          VERBOSE=1 BUILD_QT=ON \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: viewer
      if: runner.os != 'Windows'
      run: |
        make viewer \
          VERBOSE=1 BUILD_QT=ON \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: viewer (windows)
      if: runner.os == 'Windows'
      run: |
        cmake `
          -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} `
          -Dpybind11_DIR="$(pybind11-config --cmakedir)" `
          -S${{ github.workspace }} `
          -B${{ github.workspace }}/build
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.cmake_build_type }} --target ALL_BUILD