name: lint

on:
  push:
  pull_request:
  schedule:
    - cron: '34 17 * * *'

jobs:

  clang_format_check:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        path:
          - 'cpp'

    steps:

      - uses: actions/checkout@v2

      - name: event name
        run: |
          echo "github.event_name: ${{ github.event_name }}"

      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.5.0
        with:
          clang-format-version: '13'
          check-path: ${{ matrix.path }}
          fallback-style: 'LLVM' # optional

  tidy_flake8_ubuntu:

    if: ${{ github.event_name != '' || (github.event_name == '' && github.repository_owner == 'solvcon') }}

    runs-on: ${{ matrix.os }}

    env:
      JOB_MAKE_ARGS: VERBOSE=1 BUILD_QT=OFF USE_CLANG_TIDY=ON

    strategy:
        matrix:
          os: [ubuntu-22.04]
          cmake_build_type: [Debug]

        fail-fast: false

    steps:

    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: event name
      run: |
        echo "github.event_name: ${{ github.event_name }}"

    - name: dependency by apt
      run: |
        VERSION_ID=$(bash -c 'source /etc/os-release ; echo $VERSION_ID')        
        if [ "20.04" == "$VERSION_ID" ] ; then CLANG_TIDY_VERSION=10 ; else CLANG_TIDY_VERSION=14 ; fi
        sudo apt-get -qqy update
        sudo apt-get -qy install \
            sudo curl git build-essential make cmake libc6-dev gcc g++ silversearcher-ag \
            clang-tidy-${CLANG_TIDY_VERSION} \
            python3 python3-dev python3-venv
        sudo ln -fs "$(which clang-tidy-${CLANG_TIDY_VERSION})" "$(dirname $(which clang-tidy-${CLANG_TIDY_VERSION}))/clang-tidy"

    - name: dependency by pip
      run: |
        sudo pip3 install setuptools
        sudo pip3 install numpy pytest flake8

    - name: dependency (manual)
      run: sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11

    - name: show dependency
      # Copy the commands from contrib/dependency/showdep.sh
      run: |
        echo "gcc path: $(which gcc)"
        echo "gcc version: $(gcc --version)"
        echo "cmake path: $(which cmake)"
        echo "cmake version: $(cmake --version)"
        echo "python3 path: $(which python3)"
        echo "python3 version: $(python3 --version)"
        echo "pip3 path: $(which pip3)"
        python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
        echo "pytest path: $(which pytest)"
        echo "pytest version: $(pytest --version)"
        echo "clang-tidy path: $(which clang-tidy)"
        echo "clang-tidy version: $(clang-tidy -version)"
        echo "flake8 path: $(which flake8)"
        echo "flake8 version: $(flake8 --version)"

    - name: make cinclude (check_include)
      run: make cinclude

    - name: make buildext
      run: |
        make buildext \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CJOB_MAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: make pytest
      run: |
        make pytest \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CJOB_MAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: make flake8
      run: |
        make flake8 \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CJOB_MAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

  tidy_flake8_macos:

    if: ${{ github.event_name != '' || (github.event_name == '' && github.repository_owner == 'solvcon') }}

    runs-on: ${{ matrix.os }}

    env:
      JOB_MAKE_ARGS: VERBOSE=1 BUILD_QT=OFF USE_CLANG_TIDY=ON

    strategy:
      matrix:
        os: [macos-12]
        cmake_build_type: [Debug]

      fail-fast: false

    steps:

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: event name
        run: |
          echo "github.event_name: ${{ github.event_name }}"

      - name: dependency by homebrew
        run: |
          # brew update  # No update because it is slow
          brew install python3 llvm
          ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
          ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"

      - name: dependency by pip
        run: |
          echo "which pip3: $(which pip3)"
          pip3 install -U setuptools
          pip3 install -U numpy pytest flake8

      - name: dependency (manual)
        run: sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11

      - name: show dependency
        # Copy the commands from contrib/dependency/showdep.sh
        run: |
          echo "gcc path: $(which gcc)"
          echo "gcc version: $(gcc --version)"
          echo "cmake path: $(which cmake)"
          echo "cmake version: $(cmake --version)"
          echo "python3 path: $(which python3)"
          echo "python3 version: $(python3 --version)"
          echo "pip3 path: $(which pip3)"
          python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
          echo "pytest path: $(which pytest)"
          echo "pytest version: $(pytest --version)"
          echo "clang-tidy path: $(which clang-tidy)"
          echo "clang-tidy version: $(clang-tidy -version)"
          echo "flake8 path: $(which flake8)"
          echo "flake8 version: $(flake8 --version)"

      - name: make cinclude (check_include)
        run: make cinclude

      - name: make buildext
        run: |
          make buildext \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CJOB_MAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

      - name: make pytest
        run: |
          make pytest \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CJOB_MAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

      - name: make flake8
        run: |
          make flake8 \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CJOB_MAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"